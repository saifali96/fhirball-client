# import Source, Resource, Attribute from "./generated/prisma-binding/prisma.graphql"

type Query {
  # BINDING QUERIES
  inputColumns(where: InputColumnWhereInput): [InputColumn!]
  resource(where: ResourceWhereUniqueInput): Resource!
  resources(where: ResourceWhereInput): [Resource]!

  # CLIENT QUERIES
  sourceInfo(sourceId: ID, sourceName: String): Source!
  resourceInfo(resourceId: ID!): Resource!
  attributeInfo(attributeId: ID!): Attribute!
  allSources: [Source!]!
  availableResources(sourceId: ID, sourceName: String): [Resource!]
  recAvailableAttributes(resourceId: ID!): [Attribute!]
  me: User
  isAuthenticated: Boolean!
  computeSourceMappingProgress(sourceId: ID!): [Int!]
  credential(sourceId: ID!): Credential!
}

type Mutation {
  createSource(sourceName: String!, hasOwner: Boolean!): Source!
  createInputColumnAndUpdateAttribute(
    attributeId: ID!
    data: InputColumnCreateWithoutAttributeInput
  ): InputColumn!
  deleteInputColumnAndUpdateAttribute(
    attributeId: ID!
    inputColumnId: ID!
  ): InputColumn!
  createJoinAndUpdateInputColumn(
    inputColumnId: ID!
    data: JoinCreateWithoutInputColumnInput
  ): Join!
  deleteJoinAndUpdateInputColumn(inputColumnId: ID!, joinId: ID!): Join!

  updateResource(
    where: ResourceWhereUniqueInput!
    data: ResourceUpdateInput
  ): Resource!
  updateAttribute(id: ID!, data: AttributeUpdateInput): Attribute!
  updateInputColumn(id: ID!, data: InputColumnUpdateInput): InputColumn!
  updateJoin(id: ID!, data: JoinUpdateInput): Join!

  createResourceTreeInSource(
    sourceId: ID
    sourceName: String
    resourceName: String!
  ): Resource!
  deleteResource(resourceId: ID!): Resource!
  createAttributeProfileInAttribute(
    parentAttributeId: ID!
    attributeName: String!
    attributeType: String!
  ): Attribute!
  deleteAttribute(id: ID!): Attribute!

  # Credentials
  upsertCredential(
    sourceId: ID!
    login: String
    password: String!
    host: String!
    port: String!
    database: String!
    type: String!
  ): Credential!

  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
}

type Subscription {
  attribute(
    where: AttributeSubscriptionWhereInput
  ): AttributeSubscriptionPayload
  inputColumn(
    where: InputColumnSubscriptionWhereInput
  ): InputColumnSubscriptionPayload
  join(where: JoinSubscriptionWhereInput): JoinSubscriptionPayload
}

type AuthPayload {
  token: String!
  user: User!
}
